!(function(){
  if (self.Element && (Element.prototype.matches || (Element.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || null), Element.prototype.matches)){
    var a = self.Stretchy = {
      selectors: {
        base: 'textarea, select:not([size]), input:not([type]), input[type="' + 'text url email tel'.split(' ').join('"], input[type="') + '"]',
        filter: '*'
      },
      script: document.currentScript || t('script').pop(),
      resize: function(e){
        if (a.resizes(e)){
          let t = getComputedStyle(e), i = 0; if (!e.value && e.placeholder){
            var o = !0; e.value = e.placeholder;
          } const n = e.nodeName.toLowerCase(); if (n == 'textarea'){
            e.style.height = '0', t.boxSizing == 'border-box'
              ? i = e.offsetHeight
              : t.boxSizing == 'content-box' && (i = -e.clientHeight), e.style.height = e.scrollHeight + i + 'px';
          }
          else if (n == 'input'){
            e.style.width = '0', t.boxSizing == 'border-box'
              ? i = e.offsetWidth
              : t.boxSizing == 'padding-box' && (i = e.clientWidth), e.scrollLeft = 1e10; const r = Math.max(e.scrollLeft + i, e.scrollWidth - e.clientWidth); e.style.width = r + 'px';
          }
          else if (n == 'select'){
            let l, s = document.createElement('_'); for (const c in s.textContent = e.options[e.selectedIndex].textContent, e.parentNode.insertBefore(s, e.nextSibling), t){
              /^(width|webkitLogicalWidth)$/.test(c) || (s.style[c] = t[c], /appearance$/i.test(c) && (l = c));
            }s.style.width = '', s.offsetWidth > 0 && (e.style.width = s.offsetWidth + 'px', t[l] && t[l] === 'none' || (e.style.width = 'calc(' + e.style.width + ' + 2em)')), s.parentNode.removeChild(s), s = null;
          }o && (e.value = '');
        }
      },
      resizeAll: function(e){
        t(e || a.selectors.base).forEach(function(e){
          a.resize(e);
        });
      },
      active: !0,
      resizes: function(e){
        return e && e.parentNode && e.matches && e.matches(a.selectors.base) && e.matches(a.selectors.filter);
      },
      init: function(){
        a.selectors.filter = a.script.getAttribute('data-filter') || (t('[data-stretchy-filter]').pop() || document.body).getAttribute('data-stretchy-filter') || Stretchy.selectors.filter || '*', a.resizeAll();
      },
      $$: t
    }; document.readyState !== 'loading'
      ? a.init()
      : document.addEventListener('DOMContentLoaded', a.init); function e(e){
      a.active && a.resize(e.target);
    }document.body.addEventListener('input', e), document.body.addEventListener('change', e), self.MutationObserver && new MutationObserver(function(e){
      a.active && e.forEach(function(e){
        e.type == 'childList' && Stretchy.resizeAll(e.addedNodes);
      });
    }).observe(document.body, {
      childList: !0,
      subtree: !0
    });
  } function t(e, t){
    return e instanceof Node || e instanceof Window
      ? [e]
      : [].slice.call(typeof e === 'string'
        ? (t || document).querySelectorAll(e)
        : e || []);
  }
})();
//# sourceMappingURL=stretchy.min.js.map
